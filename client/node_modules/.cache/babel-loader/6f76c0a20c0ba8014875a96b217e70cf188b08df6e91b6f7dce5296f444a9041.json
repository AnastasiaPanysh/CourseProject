{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState, useEffect } from 'react';\nexport function useUserStorage() {\n  _s();\n  const [user, setUser] = useState(null);\n  useEffect(() => {\n    // При загрузке приложения проверяем, есть ли сохраненный JWT-токен\n    const storedToken = sessionStorage.getItem('jwtToken');\n    if (storedToken) {\n      try {\n        const decodedToken = JSON.parse(atob(storedToken.split('.')[1])); // Раскодирование JWT-токена (Base64)\n\n        // Проверяем срок действия токена\n        const currentTimestamp = Math.floor(Date.now() / 1000); // Текущее время в секундах\n        if (decodedToken.exp > currentTimestamp) {\n          // Токен действителен, устанавливаем пользователя\n          setUser({\n            email: decodedToken.email,\n            username: decodedToken.username\n          });\n        } else {\n          // Токен истек, очищаем его и пользователя\n          sessionStorage.removeItem('jwtToken');\n          setUser(null);\n        }\n      } catch (error) {\n        // Обработка ошибки раскодирования токена\n        console.error('Ошибка при раскодировании токена:', error);\n        sessionStorage.removeItem('jwtToken');\n        setUser(null);\n      }\n    }\n  }, []);\n\n  // Функция для записи пользователя и токена\n  const setUserAndToken = (newUser, token) => {\n    sessionStorage.setItem('jwtToken', token);\n    setUser(newUser);\n  };\n\n  // Функция для очистки пользователя и токена\n  const clearUserAndToken = () => {\n    sessionStorage.removeItem('jwtToken');\n    setUser(null);\n  };\n  return {\n    user,\n    setUserAndToken,\n    clearUserAndToken\n  };\n}\n_s(useUserStorage, \"5s2qRsV95gTJBmaaTh11GoxYeGE=\");","map":{"version":3,"names":["useState","useEffect","useUserStorage","_s","user","setUser","storedToken","sessionStorage","getItem","decodedToken","JSON","parse","atob","split","currentTimestamp","Math","floor","Date","now","exp","email","username","removeItem","error","console","setUserAndToken","newUser","token","setItem","clearUserAndToken"],"sources":["C:/Users/Nasty/Desktop/itransition/CourseProjectClient/src/storage/userStorage.ts"],"sourcesContent":["import { useState, useEffect } from 'react';\r\n\r\ninterface User {\r\n  email: string;\r\n  username: string;\r\n  // Добавьте другие поля пользователя по вашим требованиям\r\n}\r\n\r\nexport function useUserStorage() {\r\n  const [user, setUser] = useState<User | null>(null);\r\n\r\n  useEffect(() => {\r\n    // При загрузке приложения проверяем, есть ли сохраненный JWT-токен\r\n    const storedToken = sessionStorage.getItem('jwtToken');\r\n    \r\n    if (storedToken) {\r\n      try {\r\n        const decodedToken = JSON.parse(atob(storedToken.split('.')[1])); // Раскодирование JWT-токена (Base64)\r\n        \r\n        // Проверяем срок действия токена\r\n        const currentTimestamp = Math.floor(Date.now() / 1000); // Текущее время в секундах\r\n        if (decodedToken.exp > currentTimestamp) {\r\n          // Токен действителен, устанавливаем пользователя\r\n          setUser({ email: decodedToken.email, username: decodedToken.username });\r\n        } else {\r\n          // Токен истек, очищаем его и пользователя\r\n          sessionStorage.removeItem('jwtToken');\r\n          setUser(null);\r\n        }\r\n      } catch (error) {\r\n        // Обработка ошибки раскодирования токена\r\n        console.error('Ошибка при раскодировании токена:', error);\r\n        sessionStorage.removeItem('jwtToken');\r\n        setUser(null);\r\n      }\r\n    }\r\n  }, []);\r\n\r\n  // Функция для записи пользователя и токена\r\n  const setUserAndToken = (newUser: User, token: string) => {\r\n    sessionStorage.setItem('jwtToken', token);\r\n    setUser(newUser);\r\n  };\r\n\r\n  // Функция для очистки пользователя и токена\r\n  const clearUserAndToken = () => {\r\n    sessionStorage.removeItem('jwtToken');\r\n    setUser(null);\r\n  };\r\n\r\n  return {\r\n    user,\r\n    setUserAndToken,\r\n    clearUserAndToken,\r\n  };\r\n}\r\n"],"mappings":";AAAA,SAASA,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAQ3C,OAAO,SAASC,cAAcA,CAAA,EAAG;EAAAC,EAAA;EAC/B,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGL,QAAQ,CAAc,IAAI,CAAC;EAEnDC,SAAS,CAAC,MAAM;IACd;IACA,MAAMK,WAAW,GAAGC,cAAc,CAACC,OAAO,CAAC,UAAU,CAAC;IAEtD,IAAIF,WAAW,EAAE;MACf,IAAI;QACF,MAAMG,YAAY,GAAGC,IAAI,CAACC,KAAK,CAACC,IAAI,CAACN,WAAW,CAACO,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;;QAElE;QACA,MAAMC,gBAAgB,GAAGC,IAAI,CAACC,KAAK,CAACC,IAAI,CAACC,GAAG,CAAC,CAAC,GAAG,IAAI,CAAC,CAAC,CAAC;QACxD,IAAIT,YAAY,CAACU,GAAG,GAAGL,gBAAgB,EAAE;UACvC;UACAT,OAAO,CAAC;YAAEe,KAAK,EAAEX,YAAY,CAACW,KAAK;YAAEC,QAAQ,EAAEZ,YAAY,CAACY;UAAS,CAAC,CAAC;QACzE,CAAC,MAAM;UACL;UACAd,cAAc,CAACe,UAAU,CAAC,UAAU,CAAC;UACrCjB,OAAO,CAAC,IAAI,CAAC;QACf;MACF,CAAC,CAAC,OAAOkB,KAAK,EAAE;QACd;QACAC,OAAO,CAACD,KAAK,CAAC,mCAAmC,EAAEA,KAAK,CAAC;QACzDhB,cAAc,CAACe,UAAU,CAAC,UAAU,CAAC;QACrCjB,OAAO,CAAC,IAAI,CAAC;MACf;IACF;EACF,CAAC,EAAE,EAAE,CAAC;;EAEN;EACA,MAAMoB,eAAe,GAAGA,CAACC,OAAa,EAAEC,KAAa,KAAK;IACxDpB,cAAc,CAACqB,OAAO,CAAC,UAAU,EAAED,KAAK,CAAC;IACzCtB,OAAO,CAACqB,OAAO,CAAC;EAClB,CAAC;;EAED;EACA,MAAMG,iBAAiB,GAAGA,CAAA,KAAM;IAC9BtB,cAAc,CAACe,UAAU,CAAC,UAAU,CAAC;IACrCjB,OAAO,CAAC,IAAI,CAAC;EACf,CAAC;EAED,OAAO;IACLD,IAAI;IACJqB,eAAe;IACfI;EACF,CAAC;AACH;AAAC1B,EAAA,CA/CeD,cAAc"},"metadata":{},"sourceType":"module","externalDependencies":[]}